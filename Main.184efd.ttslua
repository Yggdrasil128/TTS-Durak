cardIDToSuit = {
    [0]=3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0,
    2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1
}
cardIDToValue = {
    [0]=13, 12, 11, 1, 10, 13, 12, 11, 1, 10, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 4, 3, 2, 3, 2, 4,
    5, 4, 3, 2, 13, 12, 11, 1, 10, 13, 12, 11, 1, 10, 9, 8, 7, 6, 5, 9, 8, 7, 6, 4, 3, 2
}
jokerCardID = 52
suitEmojis = {[0]="♦", "♥", "♠", "♣"}
suitColors = {[0]="#ff0000", "#ff0000", "#000000", "#000000"}
playerColors = {
    White="#ffffff", Brown="#6d3a12", Red="#d1130a", Orange="#eb6203",
    Yellow="#e6e500", Green="#48b31b", Teal="#42b19b", Blue="#3c88ff",
    Purple="#9b23f4", Pink="#ed70d0", Grey="#808080", Black="#404040"
}

strings = {
    { -- german
        buttons = {"NewGame_de_1", "CollectCards_de_1", "NewGame_de_2", "CollectCards_de_2"},
        suitNames = {[0]="Karo", "Herz", "Pik", "Kreuz"},
        playerNames = {
            White="Weiß", Brown="Braun", Red="Rot", Orange="Orange",
            Yellow="Gelb", Green="Grün", Teal="Türkis", Blue="Blau",
            Purple="Violett", Pink="Pink", Grey="Grau", Black="Schwarz"
        },
        welcome = "Willkommen bei Durak!",
        madeBy = "Entwickelt von Yggdrasil128",
        starting = "Starte neues Spiel...",
        startingPlayer = {"", " beginnt."},
        trump = {"", " ist Trumpf."},
        newGame = "Neues Spiel",
        collectCards = "Karten einsammeln",
        dealTo = {"An ", " austeilen"},
        languageTip = "Wenn du die Sprache auf Englisch stellen willst, dann gib 'language english' in den Chat ein.",
        drawStackCounter = {"Nachziehkarten: ", ""},
        spawnCardsInfo = "Wenn du die Zahl der Spielkarten ändern willst, " ..
            "dann gib 'cards N' in den Chat ein, " ..
            "wobei N für die gewünschte Zahl der Karten steht. " ..
            "Die typischsten Optionen sind 36, 52 und 104, " ..
            "aber du kannst jede Zahl eingeben, die positiv und durch 4 teilbar ist.",
        spawnCardsError = "Bitte gib eine positive, durch 4 teilbare Zahl an. Zum Beispiel: 'cards 36'",
        notEnoughCards = "Nicht genügend Karten!"
    },
    { -- english
        buttons = {"NewGame_en_1", "CollectCards_en_1", "NewGame_en_2", "CollectCards_en_2"},
        suitNames = {[0]="Diamonds", "Hearts", "Spades", "Clubs"},
        playerNames = {
            White="White", Brown="Brown", Red="Red", Orange="Orange",
            Yellow="Yellow", Green="Green", Teal="Teal", Blue="Blue",
            Purple="Purple", Pink="Pink", Grey="Grey", Black="Black"
        },
        welcome = "Welcome to Durak!",
        madeBy = "Made by Yggdrasil128",
        starting = "Starting a new game...",
        startingPlayer = {"", " to play."},
        trump = {"", " is trump."},
        newGame = "New game",
        collectCards = "Collect cards",
        dealTo = {"Deal to ", ""},
        languageTip = "If you want to set the language to german, type 'language german' in chat.",
        drawStackCounter = {"Remaining draw cards: ", ""},
        spawnCardsInfo = "If you want to change the number of playing cards, " ..
            "type 'cards N' in chat, " ..
            "where N is the desired number of cards. " ..
            "Typical options are 36, 52, and 104, " ..
            "but you can enter any number that is positive and divisible by 4.",
        spawnCardsError = "Please provide a positive number that is divisible by 4. For example: 'cards 36'",
        notEnoughCards = "Not enough cards!"
    }
}

drawAreaGUID = "34aa0a"
dumpAreaGUID = "d9c33d"
buttonGUIDs = {
    White="7a391e", Red="5eb363", Orange="8c8bc5", Yellow="9e3dab", Green="60be3d",
    Blue="902d27", Purple="3e25c3", Pink="4d1d43", Brown="4ca1b7", Teal="bcd522"
}

data = {
    language = 2,
    targetHandSize = 6,
    isWelcomeScreen = true,
    isStartingGame = false,
    isCollectingCards = false,
    showDrawStackCounter = false,
    trumpSuit = nil,
    startingPlayer = nil,
    startingPlayerName = nil
}

initialData = JSON.encode(data)

debugCommandEnabled = true

function setInfoText(text)
    text = '<textsize size="100"> </textsize>' .. text .. '<textsize size="100"> </textsize>'
    self.UI.setValue("InfoText_1", text)
    self.UI.setValue("InfoText_2", text)
end

function setInfoText2(text)
    self.UI.setValue("InfoText2_1", text)
    self.UI.setValue("InfoText2_2", text)
end

function setTrumpText()
    if not data.trumpSuit then
        return
    end
    local trumpText = strings[data.language].trump[1] ..
        strings[data.language].suitNames[data.trumpSuit] ..
        ' <textcolor color="' .. suitColors[data.trumpSuit] .. '"><textsize size="100">' ..
        suitEmojis[data.trumpSuit] .. '</textsize></textcolor>' ..
        strings[data.language].trump[2]
    setInfoText(trumpText)
end

function setStartingPlayerText()
    local text = strings[data.language].startingPlayer[1] ..
        '<textcolor color="' .. playerColors[data.startingPlayer] .. '">' ..
        data.startingPlayerName ..
        '</textcolor>' ..
        strings[data.language].startingPlayer[2]
    setInfoText2(text)
end

function updateTexts()
    if data.isWelcomeScreen then
        setInfoText(strings[data.language].welcome)
        setInfoText2("")
        print("")
        print(strings[data.language].languageTip)
        print("")
        print(strings[data.language].spawnCardsInfo)
        return
    end
    setTrumpText()
    if data.startingPlayer then
        setStartingPlayerText()
    elseif data.showDrawStackCounter then
        updateDrawStackCounter()
    end
end

function updateHandTexts()
    for k, color in pairs(Player.getAvailableColors()) do
        local ui = getObjectFromGUID(buttonGUIDs[color]).UI
        if Player[color].seated then
            ui.setValue("handText", #Player[color].getHandObjects(1))
        else
            ui.setValue("handText", "")
        end
    end
end

function updateDrawStackCounter()
    local foundObjects = getObjectFromGUID(drawAreaGUID).getObjects()
    local stackSize = 0
    if #foundObjects > 0 then
        local stack = foundObjects[1]
        stackSize = stack.type == "Card" and 1 or stack.getQuantity()
    end
    if stackSize == 0 then
        setInfoText2("")
    else
        local s = strings[data.language].drawStackCounter[1] .. stackSize .. strings[data.language].drawStackCounter[2]
        setInfoText2(s)
    end
end

function updateButtons()
    for k, guid in pairs(buttonGUIDs) do
        for language, v in pairs(strings) do
            getObjectFromGUID(guid).UI.hide("button" .. language)
        end
    end
    for k, color in pairs(Player.getAvailableColors()) do
        local obj = getObjectFromGUID(buttonGUIDs[color])
        local hand = Player[color].getHandTransform(1)
        local position = hand.position
        local rotation = hand.rotation

        position:scale(0.7)
        position.y = 0.97

        obj.setPosition(position)
        obj.setRotation(rotation)

        obj.UI.show("button" .. data.language)
    end
    for language, v in pairs(strings) do
        for k, id in pairs(v.buttons) do
            if language == data.language then
                self.UI.show(id)
            else
                self.UI.hide(id)
            end
        end
    end
end

function checkTableChange()
    local currentPosition = Player["White"].getHandTransform(1).position
    local lastPosition = data.lastWhiteHandPosition
    if lastPosition == nil or currentPosition != lastPosition then
        updateButtons()
        data.lastWhiteHandPosition = currentPosition

        -- reset all hand texts
        for k, guid in pairs(buttonGUIDs) do
            getObjectFromGUID(guid).UI.setValue("handText", "")
        end
    end
end

function everySecond()
    checkTableChange()
    updateHandTexts()
    if data.showDrawStackCounter then
        updateDrawStackCounter()
    end
end

function getActivePlayers()
    return getSeatedPlayers()
    --return Player.getAvailableColors()
end

function onSave()
    return JSON.encode(data)
end

function onLoad(json)
    if json != "" then
        data = JSON.decode(json)
    end
    if data.language == nil then
        data.language = 2
    end

    math.randomseed(os.time())

    printToAll(strings[data.language].welcome, {r=0.5, g=0.7, b=1})
    printToAll(strings[data.language].madeBy, {r=1, g=1, b=1})

    updateTexts()
    updateButtons()

    -- run once per second, forever
    Timer.create({
        identifier = "everySecond",
        function_name = "everySecond",
        delay = 1,
        repetitions = 0
    })
end

function onChat(message, player)
    -- only used for testing/deployment
    if message == "reset" and player.steam_name == "Yggdrasil128" then
        onLoad(initialData)
        print(initialData)
        return false
    end
    if debugCommandEnabled and message == "$" then
        debug()
        return false
    end

    -- admin commands
    if player.admin or player.steam_name == "Yggdrasil128" then
        if message == "language german" then
            data.language = 1
            updateTexts()
            updateButtons()
            return false
        end
        if message == "language german" then
            data.language = 2
            updateTexts()
            updateButtons()
            return false
        end
        if message == "cards" or string.sub(message, 1, 6) == "cards " then
            spawnCards(tonumber(string.sub(message, 7)))
            return false
        end
    end
end

function debug()
    local card = Player["White"].getHandObjects(1)[1]
    print(card.getData()["CardID"])
end

function spawnCards(n)
    if n == nil or n <= 0 or n % 4 > 0 then
        print("")
        print(strings[data.language].spawnCardsError)
        return
    end
    data.showDrawStackCounter = false

    -- generate ordered cardID list
    local suitOrder = {0, 1, 2, 3}
    local valueOrder = {1, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2}
    local cardIDs = {}
    for k, value in pairs(valueOrder) do
        for k2, suit in pairs(suitOrder) do
            for cardID = 0, 51 do
                if cardIDToSuit[cardID] == suit and cardIDToValue[cardID] == value then
                    table.insert(cardIDs, cardID)
                    break
                end
            end
        end
    end
    log(cardIDs)
    -- delete all cards
    for k, object in pairs(getObjects()) do
        if object.type == "Deck" or object.type == "Card" then
            object.destruct()
        end
    end
    -- spawn cards
    for i = 0, n-1 do
        local cardID = cardIDs[1 + (i % 52)]
        spawnObjectData({
            data = {
                Name = "Card",
                CardID = cardID,
                Transform = {
                    posX = -1.5, posY = 2, posZ = 0,
                    rotX = 0, rotY = 0, rotZ = 180,
                    scaleX = 1, scaleY = 1, scaleZ = 1
                }
            }
        })
    end
end

function findCardsOnTable()
    excludedGUIDs = {}
    for k, color in pairs(Player.getAvailableColors()) do
        for k2, v in pairs(Player[color].getHandObjects(1)) do
            excludedGUIDs[v.guid] = true
        end
    end
    for k, v in pairs(getObjectFromGUID(drawAreaGUID).getObjects()) do
        excludedGUIDs[v.guid] = true
    end
    for k, v in pairs(getObjectFromGUID(dumpAreaGUID).getObjects()) do
        excludedGUIDs[v.guid] = true
    end
    cards = {}
    for k, v in pairs(getObjects()) do
        if (v.type == "Deck" or v.type == "Card") and not excludedGUIDs[v.guid] then
            table.insert(cards, v)
        end
    end
    return cards
end

function collectCards()
    if data.isStartingGame then
        return
    end
    if data.startingPlayer then
        data.startingPlayer = nil
        data.startingPlayerName = nil
        data.showDrawStackCounter = true
        updateDrawStackCounter()
    end

    local cards = findCardsOnTable()
    if #cards == 0 then
        return
    end
    if data.isCollectingCards then
        return
    end
    data.isCollectingCards = true
    Timer.create({
        identifier = "collectCards2",
        function_name = "collectCards2",
        delay = 2,
        repetitions = 1
    })
    local foundObjects = getObjectFromGUID(dumpAreaGUID).getObjects()
    if #foundObjects == 0 or foundObjects[1].type == "Card" then
        for k, card in pairs(cards) do
            card.setPositionSmooth(Vector(1.5, 1, 0), false, false)
            card.setRotation(Vector(0, 0, 0))
        end
        return
    end
    dump = foundObjects[1]
    for k, v in pairs(cards) do
        if v.type == "Card" then
            v.putObject(dump)
        else
            group({dump, v})
        end
    end
end

function collectCards2()
    data.isCollectingCards = false
end

function newGame()
    if data.isStartingGame then
        return
    end
    data.isStartingGame = true
    data.isWelcomeScreen = false
    data.showDrawStackCounter = false
    setInfoText(strings[data.language].starting)
    setInfoText2("")

    -- find all cards
    cards = {}
    for k, v in pairs(getObjects()) do
        if v.type == "Deck" or v.type == "Card" then
            table.insert(cards, v)
        end
    end

    if #cards == 0 then
        setInfoText(strings[data.language].notEnoughCards)
        data.isStartingGame = false
        return
    end

    -- collect cards
    deck = group(cards)[1]

    if not deck then
        setInfoText(strings[data.language].notEnoughCards)
        data.isStartingGame = false
        return
    end

    Timer.create({
        identifier     = "newGame2",
        function_name  = "newGame2",
        delay          = 1
    })
end

function newGame2()
    deck.setPositionSmooth(Vector(-1.5, 2, 0), false, false)
    deck.setRotation(Vector(0, 0, 180))
    Timer.create({
        identifier     = "newGame3",
        function_name  = "newGame3",
        delay          = 1
    })
end

function newGame3()
    deck.shuffle()
    Timer.create({
        identifier     = "newGame4",
        function_name  = "newGame4",
        delay          = 1
    })
end

function newGame4()
    -- determine targetHandSize
    if deck.getQuantity() > 52 then
        data.targetHandSize = 8
    else
        data.targetHandSize = 6
    end

    -- deal cards to players
    players = getActivePlayers()

    if deck.getQuantity() < data.targetHandSize * #players + 3 then
        setInfoText(strings[data.language].notEnoughCards)
        data.isStartingGame = false
        return
    end

    for k, v in pairs(players) do
        deck.deal(data.targetHandSize, v)
    end
    Timer.create({
        identifier     = "newGame5",
        function_name  = "newGame5",
        delay          = 1
    })
end

function newGame5()
    -- determine trump suit
    deck.takeObject({
        position = Vector(1.5, 1, 0),
        flip     = true,
        callback_function = newGame6
    })
end

function newGame6(trumpCard)
    local cardID = trumpCard.getData()["CardID"]
    if cardID == jokerCardID then
        data.trumpSuit = math.random(0, 3)
    else
        data.trumpSuit = cardIDToSuit[cardID]
    end
    setTrumpText()

    Timer.create({
        identifier     = "newGame7",
        function_name  = "newGame7",
        parameters     = {trumpCardGUID = trumpCard.guid},
        delay          = 2
    })
end

function newGame7(parameters)
    -- put trump card back into deck
    deck.putObject(getObjectFromGUID(parameters.trumpCardGUID))

    Timer.create({
        identifier     = "newGame8",
        function_name  = "newGame8",
        delay          = 1
    })
end

function newGame8()
    -- determine starting player (the player with the lowest trump card)
    local currentLowestValue = 20
    local currentLowestPlayers = players
    for k, color in pairs(players) do
        local cards = Player[color].getHandObjects(1)
        for k2, card in pairs(cards) do
            local cardID = card.getData()["CardID"]
            if cardID != jokerCardID then
                local suit = cardIDToSuit[cardID]
                local value = cardIDToValue[cardID]
                if value == 1 then
                    -- ace is high
                    value = 14
                end
                if suit == data.trumpSuit then
                    if value < currentLowestValue then
                        currentLowestValue = value
                        currentLowestPlayers = {color}
                    elseif value == currentLowestValue then
                        table.insert(currentLowestPlayers, color)
                    end
                end
            end
        end
    end
    data.startingPlayer = currentLowestPlayers[math.random(#currentLowestPlayers)]
    if Player[data.startingPlayer].seated then
        data.startingPlayerName = Player[data.startingPlayer].steam_name
    else
        data.startingPlayerName = strings[data.language].playerNames[data.startingPlayer]
    end

    setStartingPlayerText()

    data.isStartingGame = false
end


function dealToPlayer(playerColor)
    if data.isStartingGame then
        return
    end
    if data.startingPlayer then
        data.startingPlayer = nil
        data.startingPlayerName = nil
        data.showDrawStackCounter = true
        updateDrawStackCounter()
    end

    if not Player[playerColor].seated then
        return
    end
    local actualHandSize = #Player[playerColor].getHandObjects(1)
    --if actualHandSize == 0 then
    --    return
    --end
    if not data.isCollectingCards then
        local cardsOnTable = findCardsOnTable()
        if #cardsOnTable > 0 then
            for k, v in pairs(cardsOnTable) do
                if v.type == "Card" then
                    v.deal(1, playerColor)
                else
                    v.deal(v.getQuantity(), playerColor)
                end
            end
            return
        end
    end
    if actualHandSize >= data.targetHandSize then
        return
    end
    local foundObjects = getObjectFromGUID(drawAreaGUID).getObjects()
    if #foundObjects == 0 then
        return
    end
    local stack = foundObjects[1]
    local stackSize = stack.type == "Card" and 1 or stack.getQuantity()
    local cardsToDeal = math.min(data.targetHandSize - actualHandSize, stackSize)
    stack.deal(cardsToDeal, playerColor)
end